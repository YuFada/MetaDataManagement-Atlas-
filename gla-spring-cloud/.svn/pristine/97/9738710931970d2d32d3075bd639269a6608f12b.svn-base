package com.gla.datacenter.service;

import com.gla.datacenter.MultipartSupportConfig;
import com.gla.datacenter.domain.CatalogUserMap;
import com.gla.datacenter.domain.RcsResourceCate;
import com.gla.datacenter.model.ResourceCatalogRequestModel;
import com.gla.datacenter.service.fallback.ResourceCateManagerClientServiceFallbackFactory;
import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import java.util.Map;


@FeignClient(value = "DATACENTER-GATEWAY",path = "/api8",fallbackFactory = ResourceCateManagerClientServiceFallbackFactory.class,configuration = MultipartSupportConfig.class)
//@RequestMapping(value = "/api8")
public interface ResourceCateManagerClientService {

    /**
     *
     * 功能描述: 获取资源目录分页数据
     *
     * @param:
     * @param rcsResourceCate
     * @return: java.lang.String
     * @author: zhangbo
     * @date: 2019/2/28 17:09
     */
    @RequestMapping(value = "/resource/provider/catalog")
    String getResourceCatalogPages(@RequestBody RcsResourceCate rcsResourceCate, @RequestParam("code") String code);

    /**
     *
     * 功能描述: (项、目、细目、全部)条件获取资源目录分页数据
     *
     * @param:
     * @param rcsResourceCate
     * @return: java.lang.String
     * @author: zhangbo
     * @date: 2019/2/28 17:14
     */
    @RequestMapping(value = "/resource/catalog/lv")
    String getResourceCataLogByLvPages(@RequestBody RcsResourceCate rcsResourceCate, @RequestParam("isDraft") boolean isDraft);

    /**
     *
     * 功能描述: 获取资源目录草稿
     *
     * @param:
     * @param rcsResourceCate
     * @return: java.lang.String
     * @author: zhangbo
     * @date: 2019/2/28 13:50
     */
    @RequestMapping(value = "/resource/provider/draft")
    String getResourceDraftPages(@RequestBody RcsResourceCate rcsResourceCate, @RequestParam("code") String code);

    /**
     *
     * 功能描述: 查看资源目录-目录信息
     *
     * @param:
     * @return: java.lang.String
     * @author: zhangbo
     * @date: 2019/2/28 10:07
     */
    @RequestMapping(value = "/resource/find/{id}")
    String findCatalogInfor(@PathVariable("id") String id);

    /**
     *
     * 功能描述: 资源目录详情-选择部门查询
     *
     * @param:
     * @param rcsResourceCate
     * @return: java.lang.String
     * @author: zhangbo
     * @date: 2019/2/28 11:43
     */
    @RequestMapping(value = "/resource/dept")
    String findDeptResourceInfo(@RequestBody RcsResourceCate rcsResourceCate);

    /**
     *
     * 功能描述: 资源目录审核通过
     *
     * @param:
     * @param code
     * @return: java.lang.String
     * @author: zhangbo
     * @date: 2019/3/1 14:48
     */
    @RequestMapping(value = "/resource/approved/{code}")
    String resourceApproved(@PathVariable("code") String code);

    /**
     *
     * 功能描述: 资源目录审核拒绝
     *
     * @param: 
     * @param code
     * @return: java.lang.String
     * @author: zhangbo
     * @date: 2019/3/15 14:54
     */
    @RequestMapping(value = "/resource/failure/{code}")
    public String resourceAuditFailure(@PathVariable("code") String code);

    /**
     *
     * 功能描述: 导出资源目录模板
     *
     * @param:
     * @return: org.springframework.http.ResponseEntity<byte[]>
     * @author: zhangbo
     * @date: 2019/3/4 15:58
     */
    @RequestMapping(value = "/resource/template/export")
    ResponseEntity<byte[]> downloadTemplate();

    /**
     *
     * 功能描述: 下载资源目录
     *
     * @param:
     * @return: org.springframework.http.ResponseEntity<byte[]>
     * @author: zhangbo
     * @date: 2019/3/4 18:41
     */
    @RequestMapping(value = "/resource/export")
    ResponseEntity<byte[]> downloadResource(@RequestParam("code") String code);

    /**
     *
     * 功能描述: 根据redis的key获取错误数据源，并且下载Excel
     *
     * @param:
     * @param key
     * @return: org.springframework.http.ResponseEntity<byte[]>
     * @author: zhangbo
     * @date: 2019/3/13 14:25
     */
    @RequestMapping(value = "/resource/export/error")
    ResponseEntity<byte[]> downloadErrorResource(@RequestParam("key") String key);

    /**
     *
     * 功能描述: 上传资源目录
     *
     * @param: 
     * @param file
     * @return: java.lang.String
     * @author: zhangbo
     * @date: 2019/3/5 11:51
     */
    @RequestMapping(value = "/resource/import", consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
    String importResource(@RequestPart(value = "file") MultipartFile file);

    /**
     *
     * 功能描述: 删除资源目录
     *
     * @param: 
     * @param id
     * @return: java.lang.String
     * @author: zhangbo
     * @date: 2019/3/6 10:18
     */
    @RequestMapping(value = "/resource/delete/{flag}/{id}")
    String deleteResourceCata(@PathVariable("flag") boolean flag, @PathVariable("id") String id);

    /**
     *
     * 功能描述: 资源目录的上线和下线
     *
     * @param: 
     * @param id
     * @param statu
     * @return: java.lang.String
     * @author: zhangbo
     * @date: 2019/3/6 14:05
     */
    @RequestMapping(value = "/resource/line/{id}/{statu}")
    String onlineOffline(@PathVariable("id") String id,@PathVariable("statu") int statu);

    /**
     *
     * 功能描述: 保存资源目录
     *
     * @param: 
     * @param rcsResourceCate
     * @return: java.lang.String
     * @author: zhangbo
     * @date: 2019/3/8 10:43
     */
    @PostMapping(value = "/resource/save")
    String saveResource(@RequestBody RcsResourceCate rcsResourceCate);

    /**
     *
     * 功能描述: 对资源目录修改的操作进行撤销
     *
     * @param: 
     * @param id
     * @param flag
     * @return: java.lang.String
     * @author: zhangbo
     * @date: 2019/3/8 12:53
     */
    @RequestMapping(value = "/resource/revoke/{flag}/{id}")
    String revokeResource(@PathVariable("flag") boolean flag, @PathVariable("id") String id);

    /**
     *
     * 功能描述: 根据所选目录获取所有上级关系
     *
     * @param: 
     * @param id
     * @return: java.lang.String
     * @author: zhangbo
     * @date: 2019/3/11 9:18
     */
    @RequestMapping(value = "/resource/elder/{id}")
    String getAllElderById(@PathVariable("id") String id);

    /**
     *
     * 功能描述: 更新资源目录保存为草稿
     *
     * @param:
     * @param rcsResourceCate
     * @return: java.lang.String
     * @author: zhangbo
     * @date: 2019/3/11 13:47
     */
    @RequestMapping(value = "/resource/update")
    String updateResourceCate(@RequestBody RcsResourceCate rcsResourceCate);

    /**
     *
     * 功能描述: 资源目录提交审核
     *
     * @param: 
     * @return: java.lang.String
     * @author: zhangbo
     * @date: 2019/3/13 16:16
     */
    @RequestMapping(value = "/resource/audit")
    String submitAuditResource();

    /**
     *
     * 功能描述: 获取消费者资源目录分页列表
     *
     * @param: 
     * @param rcsResourceCate
     * @return: java.lang.String
     * @author: zhangbo
     * @date: 2019/3/25 16:09
     */
    @RequestMapping(value = "/resource/consumer/catalog")
    String getResourceCatalogConsumerPages(@RequestBody RcsResourceCate rcsResourceCate,@RequestParam("code") String code);

    /**
     *
     * 功能描述: 消费者高级条件查询
     *
     * @param: 
     * @param resourceCatalogRequestModel
     * @return: java.lang.String
     * @author: zhangbo
     * @date: 2019/3/26 11:21
     */
    @RequestMapping(value = "/resource/consumer/search")
    String searchResourceCatalogConsumerPages(@RequestBody ResourceCatalogRequestModel resourceCatalogRequestModel);

    /**
     *
     * 功能描述: 消费者统计类、项、目、细目各多少个
     *
     * @param:
     * @return: java.lang.String
     * @author: zhangbo
     * @date: 2019/3/25 16:11
     */
    @RequestMapping(value = "/resource/consumer/count")
    String countResourceCatalogByConsumer();

    /**
     *
     * 功能描述: 获取资源目录类数据
     *
     * @param:
     * @return: java.lang.String
     * @author: zhangbo
     * @date: 2019/3/26 9:50
     */
    @RequestMapping(value = "/resource/class")
    String getResourceClass(@RequestParam("lv") int lv);


    /**  ------------------------------------以下均为其它服务远程调用接口-------------------------------------------  **/

    @RequestMapping(value = "/remote/resource/code")
    List<RcsResourceCate> getResourceCatalogByCodes(@RequestParam("code") String[] code);

    @RequestMapping(value = "/remote/resource/page/code")
    String getResourcePageListByResourceCode(@RequestBody RcsResourceCate rcsResourceCate);

    @RequestMapping(value = "/remote/resource/foundational")
    String getFoundationalLibraryCatalog();

    @RequestMapping(value = "/remote/resource/three/foundational")
    String getThreeLibraryCatalog();

    @RequestMapping(value = "/remote/resource/count")
    Integer getResourceCount();

    @RequestMapping(value = "/remote/resource/pcodes")
    Map<String,Object> getResourcePcodesByCode(@RequestParam("codes") String[] codes);
}
